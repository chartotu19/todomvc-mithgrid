// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

MITHgrid.Presentation.namespace("List", function(list) {
  return list.initInstance = function() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["MITHgrid.Presentation.List"].concat(__slice.call(args), [function(that, container) {
      var addClass, clickInstance, dataView, dblclickInstance, getState, keypressInstance, options, remove, toggle;
      options = that.options;
      container = that.container;
      dataView = that.dataView;
      getState = options.getState;
      clickInstance = MITHgrid.Click.initInstance({
        selectors: {
          "clicker": ""
        }
      });
      dblclickInstance = MITHgrid.DblClick.initInstance({});
      keypressInstance = MITHgrid.Enter.initInstance({});
      that.hasLensFor = function() {
        return true;
      };
      toggle = function(obj) {
        var item, p;
        p = $(obj.target).parent().parent();
        item = dataView.getItem(p.attr("id"));
        item.id = item.id[0];
        if (obj.target.checked === true) {
          p.attr("class", "completed");
          item.type = ["completed"];
        } else {
          p.attr("class", "active");
          item.type = ["active"];
        }
        return dataView.updateItems([item]);
      };
      remove = function(obj) {
        return dataView.removeItems($(obj.target).parent().parent().attr("id"));
      };
      addClass = function(el, type) {
        var state;
        if (!(el != null)) {
          return false;
        }
        el.removeClass("hidden");
        if ((state = getState()) !== "all") {
          if (state === "active" && type !== "active") {
            return el.addClass("hidden");
          } else if (state === "completed" && type !== "completed") {
            return el.addClass("hidden");
          }
        }
      };
      return that.render = function(container, model, id) {
        var el, item, rendering, t;
        rendering = {};
        item = model.getItem(id);
        el = $("<li></li>");
        rendering.el = el;
        el.attr("class", item.type);
        el.attr("id", item.id);
        el.append("<div class=\"view\"></div>");
        el.append("<input class=\"edit\" value=" + item.text + ">");
        el[0].childNodes[1].value = item.text;
        t = $("<input class=\"toggle\" type=\"checkbox\">");
        if (item.type === "completed") {
          t.attr("checked", true);
          el.find("div").append(t);
        } else {
          el.find("div").append(t);
        }
        el.find("div").append("<label>" + item.text + "</label>");
        el.find("div").append("<button class=\"destroy\"></button>");
        $(container).append(el);
        addClass(el, item.type);
        clickInstance.bind("#" + item.id).events.onClick.addListener(function(e) {
          var node;
          if ((node = e.target.nodeName) != null) {
            if (node === "BUTTON") {
              rendering.remove(e.target.id);
              remove(e);
            }
            if (node === "INPUT") {
              return toggle(e);
            }
          }
        });
        dblclickInstance.bind("#" + item.id).events.on.addListener(function(e) {
          var node;
          if ((node = e.target.nodeName) != null) {
            if (node === "LABEL") {
              return $(e.target).parent().parent().addClass("editing");
            }
          }
        });
        keypressInstance.bind("#" + item.id + " input").events.onEnter.addListener(function(e) {
          $(e.target).parent().removeClass("editing");
          return $(e.target).parent().find("label").text(e.target.value);
        });
        rendering.update = function(item) {
          addClass(el, item.type[0]);
          return console.log("List update");
        };
        rendering.remove = function(id) {
          el.remove();
          return console.log("List remove");
        };
        return rendering;
      };
    }]));
  };
});
