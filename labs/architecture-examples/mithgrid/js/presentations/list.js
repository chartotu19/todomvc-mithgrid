// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

MITHgrid.Presentation.namespace("List", function(list) {
  return list.initInstance = function() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["MITHgrid.Presentation.List"].concat(__slice.call(args), [function(that, container) {
      var addClass, clickInstance, dataView, dblclickInstance, getState, keypressInstance, options, remove, toggle;
      options = that.options;
      container = that.container;
      dataView = that.dataView;
      getState = options.getState;
      clickInstance = MITHgrid.Click.initInstance({
        selectors: {
          "clicker": ""
        }
      });
      dblclickInstance = MITHgrid.DblClick.initInstance({});
      keypressInstance = MITHgrid.Enter.initInstance({});
      that.hasLensFor = function() {
        return true;
      };
      toggle = function(obj, id, el) {
        var item;
        item = dataView.getItem(id);
        if (obj.target.checked === true) {
          el.attr("class", "completed");
          return dataView.updateItems([
            {
              id: id,
              type: "completed"
            }
          ]);
        } else {
          el.attr("class", "active");
          return dataView.updateItems([
            {
              id: id,
              type: "active"
            }
          ]);
        }
      };
      remove = function(id) {
        return dataView.removeItems(id);
      };
      addClass = function(el, type) {
        var state;
        if (!(el != null)) {
          return false;
        }
        el.removeClass("hidden");
        if ((state = getState()) !== "all") {
          if (state === "active" && type !== "active") {
            return el.addClass("hidden");
          } else if (state === "completed" && type !== "completed") {
            return el.addClass("hidden");
          }
        }
      };
      return that.render = function(container, model, id) {
        var el, item, rendering, t;
        rendering = {};
        item = model.getItem(id);
        el = $("<li></li>");
        rendering.el = el;
        el.attr("class", item.type);
        el.attr("id", id);
        el.append("<div class=\"view\"></div>");
        el.append("<input class=\"edit\" value=" + item.text + ">");
        el[0].childNodes[1].value = item.text;
        t = $("<input class=\"toggle\" type=\"checkbox\">");
        if (item.type === "completed") {
          t.attr("checked", true);
          el.find("div").append(t);
        } else {
          el.find("div").append(t);
        }
        el.find("div").append("<label>" + item.text + "</label>");
        el.find("div").append("<button class=\"destroy\"></button>");
        addClass(el, item.type[0]);
        $(container).prepend(el);
        clickInstance.bind("#" + id + " .toggle").events.onClick.addListener(function(e) {
          return toggle(e, id, el);
        });
        clickInstance.bind("#" + id + " .destroy").events.onClick.addListener(function(e) {
          return rendering.remove(id);
        });
        dblclickInstance.bind("#" + id).events.on.addListener(function(e) {
          var node;
          if ((node = e.target.nodeName) != null) {
            if (node === "LABEL") {
              return el.addClass("editing");
            }
          }
        });
        keypressInstance.bind("#" + id + " input").events.onEnter.addListener(function(e) {
          el.removeClass("editing");
          el.find("label").text(e.target.value);
          return dataView.updateItems([
            {
              id: id,
              text: e.target.value
            }
          ]);
        });
        rendering.update = function(item) {
          return addClass(el, item.type[0]);
        };
        rendering.remove = function() {
          el.remove();
          return remove(id);
        };
        return rendering;
      };
    }]));
  };
});
